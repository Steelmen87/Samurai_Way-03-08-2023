{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","form_control","error","errorSummary","Input","_ref2","input","_ref2$meta","meta","touched","props","Object","D_It_incubator_Go_INCUBATOR_3_try_SamuraiTS_Samurai_Way_03_08_2023_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","hasError","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","concat","s","assign","TextArea","_ref","_ref$meta","__webpack_require__","d","__webpack_exports__","requiredField","requiredFieldLength","value","len","length","dialogs","dialogsItems","active","messages","message","DialogItem","id","name","path","react_default","react_router_dom","to","Message","dialog","Dialogs","state","dialogsPage","dialogsElements","map","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","AddMessageFormRedux","onSubmit","values","sendMessage","textarea","letVal","reduxForm","form","Fragment","handleSubmit","Field","component","placeholder","validate","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","react_router"],"mappings":"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","file":"static/js/5.b09ee85e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControls_form_control__1PJLV\",\"error\":\"FormsControls_error__1qovh\",\"errorSummary\":\"FormsControls_errorSummary__3_U_U\"};","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const TextArea: React.FC<any> = ({input, meta: {touched, error}, ...props}) => {\r\n    let hasError = touched && error\r\n    return (\r\n        <div className={`${s.form_control} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                <textarea {...input}{...props}/></div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\nexport const Input: React.FC<any> = ({input, meta: {touched, error}, ...props}) => {\r\n    let hasError = touched && error\r\n    return (\r\n        <div className={`${s.form_control} ${hasError ? s.error : ''}`}>\r\n            <div><input {...input}{...props}/></div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextArea;","export const requiredField = (value: string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\nexport const requiredFieldLength = (len: number) => (value: string) => {\r\n    if (value && value.length > len) return `Max ${len}`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Alsx\",\"dialogsItems\":\"Dialogs_dialogsItems__256re\",\"active\":\"Dialogs_active__1hviY\",\"messages\":\"Dialogs_messages__1udF-\",\"message\":\"Dialogs_message__1qmtK\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n    id: number\r\n    name: string\r\n}\r\nconst DialogItem: React.FC<propsType> = ({id, name}) => {\r\n    let path = \"/dialogs/\" + id;\r\n\r\n    return <div className={s.dialogs + ' ' + s.active}>\r\n        <NavLink to={path}>{name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    message:string\r\n}\r\nconst Message:React.FC<PropsType> = ({message}) => {\r\n    return <div className={s.dialog}>{message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport TextArea from \"../common/FormsControls/FormsControls\";\r\nimport {requiredField, requiredFieldLength} from \"../../utils/validators/validators\";\r\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogsPage: initialStateType\r\n    sendMessage: (textarea: string) => void\r\n}\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    //@ts-ignore\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.textarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\nconst letVal = requiredFieldLength(30)\r\ntype PropsAddType = {}\r\nexport type NewMessageFormValuesType = {\r\n    textarea: string\r\n}\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsAddType> & PropsAddType> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={\"textarea\"}\r\n                    component={TextArea}\r\n                    placeholder='Enter your message'\r\n                    validate={[requiredField, letVal]}\r\n                >\r\n                </Field>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({\r\n    form: 'dialogAddMessage'\r\n})(AddMessageForm)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component: React.ComponentType) => {\r\n    function RedirectComponent(props:any) {\r\n        if (!props.isAuth) return <Redirect to='/login'/>\r\n        return <Component {...props}/>\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        sendMessage: (value:string) => {\r\n            dispatch(sendMessageCreator(value));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}