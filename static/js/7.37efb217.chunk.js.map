{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ChatPage","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","_useState","useState","_useState2","Object","D_It_incubator_Go_INCUBATOR_3_try_SamuraiTS_Samurai_Way_03_08_2023_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","key","id","message","ref","React","memo","_ref","console","log","src","photo","width","alt","userName","_useState3","_useState4","setMessage","onChange","value","disabled","onClick","sendMessage"],"mappings":"8IAeeA,UAPuB,WAClC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAD,QAMZ,IAAMA,EAAiB,WACnB,IAAMC,EAASC,YAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SACnEI,EAAWC,cASjB,OARAC,oBAAU,WAGN,OADAF,EAASG,eACF,WAEHH,EAASI,iBAEd,IAECZ,EAAAC,EAAAC,cAAA,WACgB,UAAXE,GAAsBJ,EAAAC,EAAAC,cAAA,yBACvBF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,QAIND,EAAyB,WAC3B,IAAME,EAAoBC,iBAA8B,MAClDC,EAAWZ,YAA6C,SAAAC,GAAK,OAAIA,EAAMC,KAAKU,WAFjDC,EAGOC,oBAAS,GAHhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAG1BK,EAH0BH,EAAA,GAGZI,EAHYJ,EAAA,GAIjCV,oBAAU,WACFa,GAEAR,EAAkBU,QAAQC,eAAe,CAACC,SAAU,YAEzD,CAACV,IASJ,OACIjB,EAAAC,EAAAC,cAAA,OAAK0B,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAThC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,KAK/BP,EAASuB,IAAI,SAACC,GAAD,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CAASC,IAAKF,EAAEG,GAAIC,QAASJ,MAClDzC,EAAAC,EAAAC,cAAA,OAAK4C,IAAK/B,MAOhB2B,EAAiCK,IAAMC,KAAK,SAAAC,GAAe,IAAbJ,EAAaI,EAAbJ,QAEhD,OADAK,QAAQC,IAAI,2BAERnD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKkD,IAAKP,EAAQQ,MAAOzB,MAAO,CAAC0B,MAAO,QAASC,IAAK,QAAQvD,EAAAC,EAAAC,cAAA,SAAI2C,EAAQW,UAC1ExD,EAAAC,EAAAC,cAAA,WACC2C,EAAQA,QACT7C,EAAAC,EAAAC,cAAA,cAINY,EAA+B,WAAM,IAAA2C,EACTtC,mBAAS,IADAuC,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAChCZ,EADgCa,EAAA,GACvBC,EADuBD,EAAA,GAEjCtD,EAASC,YAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SACnEI,EAAWC,cAQjB,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAU0D,SAAU,SAAA5B,GAAC,OAAI2B,EAAW3B,EAAEE,cAAc2B,QAAQA,MAAOhB,KACvE7C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACI4D,SAAqB,UAAX1D,EAAoB2D,QAbnB,WAClBlB,IAGLrC,EAASwD,YAAYnB,IACrBc,EAAW,OAOH","file":"static/js/7.37efb217.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport {ChatMessageIpType, statusType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {chatMessageType, sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype propsType = {}\r\nconst ChatPage: React.FC<propsType> = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\nexport default ChatPage;\r\n\r\nconst Chat: React.FC = () => {\r\n    const status = useSelector<AppStateType, statusType>(state => state.chat.status)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            //@ts-ignore\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some Error</div>}\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\nconst Messages: React.FC<{}> = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement | null>(null)\r\n    const messages = useSelector<AppStateType, chatMessageType[]>(state => state.chat.messages)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            //@ts-ignore\r\n            messagesAnchorRef.current.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\ntype MessageType = {\r\n    message: ChatMessageIpType\r\n}\r\nconst Message: React.FC<MessageType> = React.memo(({message}) => {\r\n    console.log('>>>>>>>>>>>>>>>>>>>>>ME')\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: '30px'}} alt={'img'}/><b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector<AppStateType, statusType>(state => state.chat.status)\r\n    const dispatch = useDispatch();\r\n    const sendMessageHandler = () => {\r\n        if (!message) return;\r\n        //wsChannel && wsChannel.send(message)\r\n        //@ts-ignore\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={e => setMessage(e.currentTarget.value)} value={message}/></div>\r\n            <div>\r\n                <button\r\n                    disabled={status !== 'ready'} onClick={sendMessageHandler}>Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}