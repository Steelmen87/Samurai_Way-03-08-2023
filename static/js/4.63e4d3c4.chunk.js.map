{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","form_control","error","errorSummary","Input","_ref2","input","_ref2$meta","meta","touched","props","Object","D_It_incubator_Go_INCUBATOR_3_try_SamuraiTS_Samurai_Way_03_08_2023_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","hasError","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","concat","s","assign","TextArea","_ref","_ref$meta","__webpack_require__","d","__webpack_exports__","requiredField","requiredFieldLength","value","len","length","descriptionBlock","mainPhoto","contact","postsBlock","posts","item","ProfileStatusWithHooks","_useState","useState","_useState2","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileReduxForm","reduxForm","form","profile","handleSubmit","onSubmit","style","Field","validate","component","name","placeholder","type","keys","contacts","map","el","key","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","alt","ProfileInfo_ProfileDataForm","initialValues","then","ProfileInfo_ProfileData","callBack","target","files","ProfileInfo_ProfileStatusWithHooks","ProfileData","es_button","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","index","ProfileInfo_Contacts","contactTitle","contactValue","Contacts","_ref3","Post","message","likesCount","MyPosts","React","memo","postsElements","p","MyPosts_Post_Post","id","AddPostReduxForm","addPost","letVal","Fragment","MyPostsContainer","connect","state","profilePage","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","components_Profile_Profile","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.63e4d3c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControls_form_control__1PJLV\",\"error\":\"FormsControls_error__1qovh\",\"errorSummary\":\"FormsControls_errorSummary__3_U_U\"};","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const TextArea: React.FC<any> = ({input, meta: {touched, error}, ...props}) => {\r\n    let hasError = touched && error\r\n    return (\r\n        <div className={`${s.form_control} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                <textarea {...input}{...props}/></div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\nexport const Input: React.FC<any> = ({input, meta: {touched, error}, ...props}) => {\r\n    let hasError = touched && error\r\n    return (\r\n        <div className={`${s.form_control} ${hasError ? s.error : ''}`}>\r\n            <div><input {...input}{...props}/></div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextArea;","export const requiredField = (value: string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\nexport const requiredFieldLength = (len: number) => (value: string) => {\r\n    if (value && value.length > len) return `Max ${len}`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__kDwz4\",\"mainPhoto\":\"ProfileInfo_mainPhoto__pYuqt\",\"contact\":\"ProfileInfo_contact__30_FT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__S5_Vx\",\"posts\":\"MyPosts_posts__3-P83\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1rBYi\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusWithHooks = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooks> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    //85\r\n    //86 virtual Dom\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import React, {FormEvent} from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport TextArea, {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport s from './ProfileInfo.module.css'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport {profileType} from \"../../../types/types\";\r\n\r\nexport interface IFormProps {\r\n    initialValues: profileType\r\n    profile: profileType\r\n    error: string\r\n}\r\n\r\nexport interface IDispatchProps {\r\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\n/*type propsType = {\r\n    profile: profileType\r\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void\r\n    error: string\r\n}*/\r\nconst ProfileDataForm: React.FC<any> = (props) => {\r\n    const {profile, error, handleSubmit} = props\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n        {error && <div className={style.errorSummary}>{error}</div>}\r\n        <div><b>Full name:</b>\r\n            <Field\r\n                validate={[]}\r\n                component={Input}\r\n                name={\"fullName\"}\r\n                placeholder={\"Full name\"}/></div>\r\n\r\n\r\n        <b>Looking for a job:</b> <Field\r\n        validate={[]}\r\n        component={Input}\r\n        type=\"checkbox\"\r\n        name={\"lookingForAJob\"}\r\n    />\r\n        <div><b>My professional skills:</b>\r\n            <div><Field\r\n                validate={[]}\r\n                component={TextArea}\r\n                name={\"lookingForAJobDescription\"}\r\n                placeholder={\"My professional skills\"}/>\r\n            </div>\r\n        </div>\r\n\r\n        <div><b>About Me:</b>\r\n            <Field\r\n                validate={[]}\r\n                component={Input}\r\n                name={\"aboutMe\"}\r\n                placeholder={\"about Me\"}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b>{Object.keys(profile.contacts).map((el) => {\r\n            return <div className={s.contact} key={el}>\r\n                <b>{el}:</b>\r\n                <Field\r\n                    validate={[]}\r\n                    component={Input}\r\n                    name={'contacts.' + el}\r\n                    placeholder={el}/>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\n\r\nconst ProfileReduxForm = reduxForm<IFormProps, IDispatchProps>({form: 'profile-data'})(ProfileDataForm)\r\n\r\nexport default ProfileReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from './../../../assets/images/user.png'\r\nimport ProfileReduxForm from \"./ProfileDataForm\";\r\nimport {propsType} from './../Profile';\r\nimport {profileType} from \"../../../types/types\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\nconst ProfileInfo: React.FC<propsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const callBack = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onSubmit = (e: any) => {\r\n        saveProfile(e).then(() => setEditMode(false))\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt={'img'}/>\r\n                {editMode\r\n                    //@ts-ignore\r\n                    ? <ProfileReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} callBack={callBack}/>}\r\n                <div>{isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}</div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    callBack: () => void\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, callBack}) => {\r\n\r\n    return <div>\r\n        {isOwner && <div>\r\n            <Button onClick={callBack}>edit</Button>\r\n        </div>}\r\n        <div><b>Full name:</b> {profile.fullName}</div>\r\n        <div><b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : 'no'}</div>\r\n        {profile.lookingForAJob &&\r\n        <div><b>My professional skills:</b> {profile.lookingForAJobDescription}</div>}\r\n        <div><b>About Me:</b> {profile.aboutMe}</div>\r\n\r\n        <div>\r\n            <b>Contacts:</b>{Object.keys(profile.contacts).map((el, index) => {\r\n            return <div className={s.contact} key={index}><Contacts\r\n                contactTitle={el}\r\n                //@ts-ignore\r\n                contactValue={profile.contacts[el]}\r\n            /></div>\r\n        })}\r\n        </div>\r\n\r\n    </div>\r\n}\r\ntype propsTypeContacts = {\r\n    contactTitle:string\r\n    contactValue:string\r\n}\r\nconst Contacts = ({contactTitle, contactValue}:propsTypeContacts) => {\r\n    return (\r\n        <div>\r\n            <div><b>{contactTitle}:</b> {contactValue}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype propsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst Post: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img alt={\"alt img\"}\r\n                 src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {requiredField, requiredFieldLength} from \"../../../utils/validators/validators\";\r\nimport TextArea from \"../../common/FormsControls/FormsControls\";\r\nimport {postType} from \"../../../types/types\";\r\n//88 pureComponent\r\n\r\ntype MyPostsType = {\r\n    posts: Array<postType>\r\n    addPost: (str: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n    let onSubmit = (value: any) => {\r\n        props.addPost(value.addPost);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\nconst letVal = requiredFieldLength(30)\r\n\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormDataType, loginOwnProps> & loginOwnProps> = (props) => {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        placeholder={\"post Message\"}\r\n                        name={\"addPost\"}\r\n                        component={TextArea}\r\n                        validate={[requiredField, letVal]}\r\n                    >\r\n                    </Field>\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n        </>)\r\n}\r\ntype FormDataType = {\r\n    addPost: string\r\n}\r\ntype loginOwnProps = {}\r\nexport const AddPostReduxForm = reduxForm<FormDataType, loginOwnProps>({\r\n    form: 'postForm'\r\n})(AddPostForm)\r\n","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {postType} from \"../../../types/types\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<postType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (value: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {addPost: addPostActionCreator})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../types/types\";\r\n\r\n\r\nexport type propsType = MapPropsTypeProfile & DispatchPropsTypeProfile\r\nexport type MapPropsTypeProfile={\r\n    isOwner: boolean\r\n    profile: profileType\r\n    status: string\r\n}\r\nexport type DispatchPropsTypeProfile = {\r\n    saveProfile: Function\r\n    updateStatus: (status: string) => void\r\n    savePhoto: Function\r\n}\r\nconst Profile: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus, getUserProfile, savePhoto, saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {profileType} from \"../../types/types\";\r\nimport {RouteComponentProps} from 'react-router';\r\n\r\ntype mapStateToPropsType = {\r\n    profile: profileType | null\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (proto: File) => void\r\n    saveProfile: (profile: profileType) => Promise<any>\r\n}\r\ntype PathParamsProps = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<mapStateToPropsType & mapDispatchToProps & RouteComponentProps<PathParamsProps>, any> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: mapStateToPropsType & mapDispatchToProps & RouteComponentProps<PathParamsProps>,\r\n                       prevState: AppStateType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                //@ts-ignore\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                //@ts-ignore\r\n                isOwner={!this.props.match.params.userId}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}